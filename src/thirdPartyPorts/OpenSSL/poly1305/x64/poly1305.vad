///////////////////////////////////////////////////////////////////////////////
//
// Based on poly1305-x86_64.pl from OpenSSL 1.1.1-dev
// See https://github.com/openssl/openssl/blob/master/crypto/poly1305/asm/poly1305-x86_64.pl
// The original file contains the following notices:
//
// # ==================================================================== 
// # Copyright 2016 The OpenSSL Project Authors. All Rights Reserved.
// #
// # Licensed under the OpenSSL license (the "License").  You may not use
// # this file except in compliance with the License.  You can obtain a copy
// # in the file LICENSE in the source distribution or at
// # https://www.openssl.org/source/license.html
// #
// # ====================================================================
// # Written by Andy Polyakov <appro@openssl.org> for the OpenSSL
// # project. The module is, however, dual licensed under OpenSSL and
// # CRYPTOGAMS licenses depending on where you obtain it. For further
// # details see http://www.openssl.org/~appro/cryptogams/.
// # ==================================================================== 
//
///////////////////////////////////////////////////////////////////////////////

include{:verbatim}{:from BASE} "crypto/poly1305/x64/poly1305_math.i.dfy"
include{:verbatim}{:from BASE} "crypto/poly1305/x64/poly1305_util.i.dfy"
include{:verbatim}{:from BASE} "crypto/poly1305/x64/poly1305_bitvectors.i.dfy"
include{:verbatim}{:from BASE} "arch/x64/vale.i.dfy"
include{:verbatim}{:from BASE} "lib/util/operations.i.dfy"
include{:from BASE} "arch/x64/decls.vad"
include{:from BASE} "arch/x64/decls64.vad"

#verbatim
module x64_poly
{
import opened x64_def_s
import opened x64_vale_i
import opened x64_decls_i
import opened x64_decls64_i
import opened x64__Poly1305_math_i
import opened x64__Poly1305_util_i
import opened x64__Poly1305_bitvectors_i
import opened operations_i
#endverbatim

procedure{:refined} poly1305_multiply(ghost r1:uint64) returns(ghost hh:int)
    lets
        d1 @= r8; d2 @= r9; d3 @= r10; r0 @= r11; s1 @= r13; h0 @= r14; h1 @= rbx; h2 @= rbp;
        n := 0x1_0000_0000_0000_0000;
        p := n * n * 4 - 5;
        r := r1 * n + r0;
        h := h2 * (n * n) + h1 * n + h0;
    reads
        r0; s1;
    modifies
        rax; rdx; d1; d2; d3; h0; h1; h2; efl;
    requires
        r1 % 4 == 0;
        s1 == r1 + r1 / 4;
        h2 * r0 < 7 * (n / 16);
        h0 * r1 < n * (n / 16);
        h1 * r0 < n * (n / 16);
        h2 * s1 < n * (n / 8);
        h0 * r0 < n * (n / 16);
        h1 * s1 < n * (n / 8);
        h2 * s1 < 7 * (5 * n / 64);
        rax == r1;
    ensures
        hh == (n * n) * d3 + n * h1 + h0;
        (h * r) % p == hh % p;
        d3 / 4 * 4 + d3 / 4 < n;
        rax == 0xffff_ffff_ffff_fffc;
{
    lemma_BitwiseAdd64();
    lemma_BitwiseMul64();

    ghost var gd0 := h0 * r0 + h1 * s1;
    ghost var gd1 := h0 * r1 + h1 * r0 + h2 * s1;
    ghost var gd2 := h2 * r0;

    Mul64Wrap(h0);  // h0*r1
    Mov64(d2, rax);
    Mov64(rax, r0);
    Mov64(d3, rdx);
    //assert n * d3 + d2 == old(h0 * r1);

    Mul64Wrap(h0);  // h0*r0
    Mov64(h0, rax); // future h0
    Mov64(rax, r0);
    Mov64(d1, rdx);
    //assert n * d1 + h0 == old(h0 * r0);

    Mul64Wrap(h1);  // h1*r0
    Add64Wrap(d2, rax);
    Mov64(rax, s1);
    Adc64Wrap(d3, rdx);
    //assert n * d3 + d2 == old(h0 * r1 + h1 * r0);

    Mul64Wrap(h1);  // h1*s1
    Mov64(h1, h2);  // borrow h1
    Add64Wrap(h0, rax);
    Adc64Wrap(d1, rdx);
    //assert n * d1 + h0 == old(h0 * r0 + h1 * s1);

    IMul64Wrap(h1, s1); // h2*s1
    Add64Wrap(d2, h1);
    Mov64(h1, d1);
    Adc64Wrap(d3, 0);
    //assert n * d3 + d2 == old(h0 * r1 + h1 * r0 + h2 * s1);

    IMul64Wrap(h2, r0); // h2*r0
    //assert h2 == gd2;
    Add64Wrap(h1, d2);
    Mov64(rax, 0xffff_ffff_ffff_fffc); // mask value
    Adc64Wrap(d3, h2);

    hh := (n * n) * d3 + n * h1 + h0;
    //assert hh == gd2 * (n * n) + gd1 * n + gd0;
    lemma_poly_multiply(n, p, r, h, r0, r1, old(h0), old(h1), old(h2), s1, gd0, gd1, gd2, hh);
}

procedure{:refined} poly1305_reduce() returns(ghost hh:int)
    lets
        d3 @= r10; h0 @= r14; h1 @= rbx; h2 @= rbp;
        n := 0x1_0000_0000_0000_0000;
        p := n * n * 4 - 5;
        hd := (n * n) * d3 + n * h1 + h0;
    modifies
        rax; d3; h0; h1; h2; efl;
    requires
        d3 / 4 * 4 + d3 / 4 < n;
        rax == 0xffff_ffff_ffff_fffc;
    ensures
        hh == (n * n) * h2 + n * h1 + h0;
        hd % p == hh % p;
        h2 < 5;
{
    lemma_BitwiseAdd64();
    lemma_poly_bits64();

    And64(rax, d3);
    Mov64(h2, d3);
    Shr64(d3, 2);
    And64(h2, 3);
    Add64Wrap(rax, d3);
    Add64Wrap(h0, rax);
    Adc64Wrap(h1, 0);
    Adc64Wrap(h2, 0);

    ghost var h10 := n * old(h1) + old(h0);
    hh := h10 + rax + (old(d3) % 4) * (n * n);
    lemma_poly_reduce(n, p, hd, old(d3), h10, rax, hh);
}

procedure{:refined}{:bridge} poly1305_iteration(ghost r1:uint64)
    //HACK: returns(ghost hh:int)
    lets
        d1 @= r8; d2 @= r9; d3 @= r10; r0 @= r11; s1 @= r13; h0 @= r14; h1 @= rbx; h2 @= rbp;
        n := 0x1_0000_0000_0000_0000;
        p := n * n * 4 - 5;
        r := r1 * n + r0;
        h := h2 * (n * n) + h1 * n + h0;
    reads
        r0; s1;
    modifies
        rax; rdx; d1; d2; d3; h0; h1; h2; efl;
    requires
        r0 < n / 16;
        r1 < n / 16;
        r1 % 4 == 0;
        s1 == r1 + r1 / 4;
        h2 < 7;
        rax == r1;
    ensures
        // hh == (n * n) * h2 + n * h1 + h0;
        // modp(h * r) == modp(hh);
        // HACK: workaround for lack of {:bridge}/returns:
        exists hh ::
            (   hh == (n * n) * h2 + n * h1 + h0
             && modp(h * r) == modp(hh)
             );
        h2 < 5;
{
    forall x:nat, xb, y:nat, yb :| x < xb && y < yb :: x * y < xb * yb
    {
        lemma_mul_strict_upper_bound(x, xb, y, yb);
    }

    (ghost var hd) := poly1305_multiply(r1);
    (ghost var hh) := poly1305_reduce();
    reveal modp;
    assert hh == (n * n) * h2 + n * h1 + h0 && modp(h * r) == modp(hh);
}

procedure{:timeLimitMultiplier 20} poly1305_blocks(
    ghost h_in:int,
    ghost ctx_id:heaplet_id,
    ghost inp_id:heaplet_id)
    returns(ghost h:int)
    lets
        ctx @= rdi; inp @= rsi; len @= rdx; padbit @= rcx; d1 @= r8; d2 @= r9; d3 @= r10;
        r0 @= r11; r1 @= r12; s1 @= r13; h0 @= r14; h1 @= rbx; h2 @= rbp;
        n := 0x1_0000_0000_0000_0000;
        p := n * n * 4 - 5;
    reads
        ctx; padbit;
    modifies
        rax; rdx; r15; inp; len; d1; d2; d3; r0; r1; s1; h0; h1; h2; efl; mem;
    requires/ensures
        ValidSrcAddrs(mem, ctx_id, ctx, 64, Public, 24 * 8);
        ValidSrcAddrs(mem, inp_id, old(inp), 64, Public, old(len));
    lets
        r0_in := mem[ctx_id].mem64[ctx + 24].v;
        r1_in := mem[ctx_id].mem64[ctx + 32].v;
        r := r1_in * n + r0_in;
    requires
        len % 16 == 0; // REVIEW: may be stronger than necessary
        inp + len < n;
        ctx_id != inp_id;
        let h0_in := mem[ctx_id].mem64[ctx + 0].v;
        let h1_in := mem[ctx_id].mem64[ctx + 8].v;
        let h2_in := mem[ctx_id].mem64[ctx + 16].v;
        h_in == h2_in * (n * n) + h1_in * n + h0_in;
        r0_in < n / 16;
        r1_in < n / 16;
        r1_in % 4 == 0;
        h2_in < 5;
        padbit < 2;
    ensures
        h2 < 5;
        mem == old(mem)[ctx_id := mem[ctx_id]];
        h0 == mem[ctx_id].mem64[ctx + 0].v;
        h1 == mem[ctx_id].mem64[ctx + 8].v;
        h2 == mem[ctx_id].mem64[ctx + 16].v;
        r0 == r0_in;
        r1 == r1_in;
        s1 == r1 + r1 / 4;
        ctx == old(ctx); // REVIEW: framing should add this automatically
        inp == old(inp + len);
        forall i :: ctx + 24 <= i < ctx + 24 * 8 && (i - ctx) % 8 == 0 ==> mem[ctx_id].mem64[i] == old(mem)[ctx_id].mem64[i];
        h == h2 * (n * n) + h1 * n + h0;
        modp(h) == poly1305_heap_blocks(modp(h_in), padbit * n * n, r, mem[inp_id].mem64, old(inp), old(inp + len));
{
    lemma_BitwiseAdd64();
    lemma_poly_bits64();

    ghost var length := len;

    Shr64(len, 4);
    // Slight difference: the original code has a special case for len == 0 here.
    // We can let len == 0 pass through because of the slight difference in the loop condition (see below)
    Mov64(r15, len); // reassign len

    Load64(r0, ctx, 24, Public, ctx_id); // load r
    Load64(s1, ctx, 32, Public, ctx_id);

    Load64(h0, ctx, 0, Public, ctx_id); // load hash value
    Load64(h1, ctx, 8, Public, ctx_id);
    Load64(h2, ctx, 16, Public, ctx_id);

    Mov64(r1, s1);
    Shr64(s1, 2);
    Mov64(rax, r1);
    Add64(s1, r1); // s1 = r1 + (r1 >> 2)

    h := h_in;
    assert modp(h) == poly1305_heap_blocks(modp(h_in), padbit * n * n, r, mem[inp_id].mem64, old(inp), inp) by
    {
        reveal modp;
        reveal poly1305_heap_blocks;
    }

    assert{:split_here} true;
    while (r15 != 0) // Slight difference: the original code uses the zero flag from "len-=16" rather than comparing len to 0
        invariant
            r == r1 * n + r0;
            h == h2 * (n * n) + h1 * n + h0;
            r0 < n / 16;
            r1 < n / 16;
            r1 % 4 == 0;
            s1 == r1 + r1 / 4;
            h2 < 5;
            rax == r1;
            inp + 16 * r15 == old(inp) + length;
            length == old(len);
            ValidSrcAddrs(mem, ctx_id, ctx, 64, Public, 24 * 8);
            ValidSrcAddrs(mem, inp_id, old(inp), 64, Public, length);
            ctx == old(ctx); // REVIEW: framing should add this automatically
            forall i :: ctx + 24 <= i < ctx + 24 * 8 && (i - ctx) % 8 == 0 ==> mem[ctx_id].mem64[i] == old(mem)[ctx_id].mem64[i];
            modp(h) == poly1305_heap_blocks(modp(h_in), padbit * n * n, r, mem[inp_id].mem64, old(inp), inp);
            mem == old(mem)[ctx_id := mem[ctx_id]];
        decreases
            r15;
    {
        ghost var hp := h;
        h := h + n * n * padbit + n * mem[inp_id].mem64[inp + 8].v + mem[inp_id].mem64[inp].v;
        ghost var hq := h;

        Add64Wrap(h0, Mem(inp, 0, Public, inp_id)); // accumulate input
        Adc64Wrap(h1, Mem(inp, 8, Public, inp_id));
        AddLea64(inp, inp, 16);
        Adc64Wrap(h2, padbit);

        poly1305_iteration(r1);

        Mov64(rax, r1);
        Sub64(r15, 1); // len-=16

        exists hh :: hh == (n * n) * h2 + n * h1 + h0 && modp(h * r) == modp(hh);
        h := hh;

        assert modp(h) == poly1305_heap_blocks(modp(h_in), padbit * n * n, r, mem[inp_id].mem64, old(inp), inp) by
        {
            reveal poly1305_heap_blocks;
            reveal modp;
            lemma_poly_demod(p, hp, hq - hp, r);
        }
    }

    Store64(ctx, h0, 0, Public, ctx_id);
    Store64(ctx, h1, 8, Public, ctx_id);
    Store64(ctx, h2, 16, Public, ctx_id);
}

// last 1..15 bytes, in case len is not a multiple of 16
procedure{:timeLimitMultiplier 2} poly1305_last_block()
    lets
        h0 @= r14; h1 @= rbx; h2 @= rbp; r0 @= r11; s1 @= r13; nExtra @= r15;
        n := 0x1_0000_0000_0000_0000;
        p := n * n * 4 - 5;
        r1 := rax;
        r := lowerUpper128(r0, r1);
        hBlocks := lowerUpper192(lowerUpper128(h0, h1), h2);
        inpLast := lowerUpper128(r8, r9);
    reads
        r0; s1; nExtra;
    modifies
        rax; rcx; rdx; r8; r9; r10; h0; h1; h2; efl;
    requires
        h2 < 5;
        r0 < n / 16;
        r1 < n / 16;
        r1 % 4 == 0;
        s1 == r1 + r1 / 4;
        1 <= nExtra < 16;
    ensures
        h2 < 5;
        let padLast := power2(nExtra * 8);
        let hLast := lowerUpper192(lowerUpper128(h0, h1), h2);
        modp(hLast) == modp((modp(hBlocks) + padLast + (inpLast % padLast)) * r);
{
    ghost var padLast := power2(nExtra * 8);
    lemma_BitwiseAdd64();

    if (nExtra < 8)
    {
        lemma_bytes_shift_power2(nExtra);
        Mov64(rcx, nExtra);
        Shl64(rcx, 3);
        Mov64(rdx, 1);
        Shl64(rdx, rcx);
        assert rdx == padLast;

        // inpLast := (inpLast % padLast)
        lemma_bytes_and_mod(r8, nExtra);
        lemma_mod_power2_lo(r8, r9, nExtra, power2(8 * nExtra));
        Mov64(rcx, rdx);
        Sub64(rcx, 1);
        And64(r8, rcx);
        Mov64(r9, 0);
        assert r8 == old(r8) % padLast;
        assert lowerUpper128(r8, r9) == inpLast % padLast;

        // h += (inpLast % padLast)
        Add64Wrap(h0, r8);
        Adc64Wrap(h1, r9);
        Adc64Wrap(h2, 0);

        Add64Wrap(h0, rdx);
        Adc64Wrap(h1, 0);
        Adc64Wrap(h2, 0);
    }
    else
    {
        lemma_bytes_shift_power2(nExtra - 8);
        Mov64(rcx, nExtra);
        Sub64(rcx, 8);
        Shl64(rcx, 3);
        Mov64(rdx, 1);
        Shl64(rdx, rcx);
        assert padLast == lowerUpper128(0, rdx) by
        {
            lemma_power2_add64(8 * nExtra - 64);
            reveal lowerUpper128;
        }

        // inpLast := (inpLast % padLast)
        lemma_bytes_and_mod(r9, nExtra - 8);
        lemma_mod_hi(r8, r9, power2(8 * (nExtra - 8)));
        Mov64(rcx, rdx);
        Sub64(rcx, 1);
        And64(r9, rcx);
        assert lowerUpper128(r8, r9) == inpLast % padLast;

        // h += (inpLast % padLast)
        Add64Wrap(h0, r8);
        Adc64Wrap(h1, r9);
        Adc64Wrap(h2, 0);

        Add64Wrap(h0, 0);
        Adc64Wrap(h1, rdx);
        Adc64Wrap(h2, 0);
    }

    ghost var h := hBlocks + (inpLast % padLast) + padLast;
    assert h == h2 * (n * n) + h1 * n + h0 by { reveal lowerUpper192; reveal lowerUpper128; }
    assert r == r1 * n + r0 by { reveal lowerUpper128; }
    poly1305_iteration(r1);
    exists hLast :: (hLast == h2 * (n * n) + h1 * n + h0 && modp(h * r) == modp(hLast));

    assert hLast == lowerUpper192(lowerUpper128(h0, h1), h2) by { reveal lowerUpper192; reveal lowerUpper128; }
    lemma_poly_demod(p, hBlocks, (inpLast % padLast) + padLast, r);
    assert modp(hLast) == modp((modp(hBlocks) + padLast + (inpLast % padLast)) * r) by { reveal modp; }
}

// h := (h % p) % 2^128;
procedure{:refined}{:bridge} poly1305_reduce_last()
    lets
        h0 @= r14; h1 @= rbx; h2 @= rbp;
        h := lowerUpper192(lowerUpper128(h0, h1), h2);
    modifies
        r8; r9; r10; rax; h0; h1; h2; efl;
    requires
        h2 < 5;
    ensures
        lowerUpper128(h0, h1) == mod2_128(modp(h));
{
    lemma_BitwiseAdd64();
    lemma_BitwiseSub64();
    lemma_poly_bits64();

    Mov64(r8, h0);
    Mov64(r9, h1);
    Mov64(r10, h2);
    Add64Wrap(r8, 5);
    Adc64Wrap(r9, 0);
    Adc64Wrap(r10, 0);

    assert h + 5 == lowerUpper192(lowerUpper128(r8, r9), r10)
        by { reveal lowerUpper128; reveal lowerUpper192; }
    lemma_reduce128(h, old(h2), old(h1), old(h0), h + 5, r10, r9, r8);

    Shr64(r10, 2);

    Mov64(rax, r10);
    Sub64Wrap(rax, 1); // mask of ones if h < p, zero otherwise
    assert rax == (if r10 == 0 then 0xffff_ffff_ffff_ffff else 0);
    And64(h0, rax);
    And64(h1, rax);

    Mov64(rax, 0);
    Sub64Wrap(rax, r10); // mask of ones if p <= h < 2 * p, zero otherwise
    assert rax == (if r10 == 1 then 0xffff_ffff_ffff_ffff else 0);
    And64(r8, rax);
    And64(r9, rax);

    // Either h1 == h0 == 0 or r9 == r8 == 0; add to select the nonzero one:
    Add64(h0, r8);
    Add64(h1, r9);
}

// h := (h + key_s) % 2^128
procedure{:refined}{:bridge} poly1305_add_key_s()
    lets
        h0 @= r14; h1 @= rbx; key_s0 @= rax; key_s1 @= rdx;
        h_in := lowerUpper128(h0, h1);
        key_s := lowerUpper128(key_s0, key_s1);
    reads
        key_s0; key_s1;
    modifies
        h0; h1; efl;
    ensures
        lowerUpper128(h0, h1) == mod2_128(h_in + key_s);
{
    lemma_BitwiseAdd64();

    Add64Wrap(h0, key_s0);
    Adc64Wrap(h1, key_s1);

    ghost var c := if Cf(efl) then 0x1_0000_0000_0000_0000 * 0x1_0000_0000_0000_0000 else 0;
    calc
    {
        mod2_128(h_in + key_s);              { reveal lowerUpper128; }
        mod2_128(c + lowerUpper128(h0, h1)); { reveal mod2_128; }
        lowerUpper128(h0, h1);
    }
}

procedure{:timeLimitMultiplier 2} poly1305_impl(
    ghost key_r:uint128,
    ghost key_s:uint128,
    ghost ctx_id:heaplet_id,
    ghost inp_id:heaplet_id)
    returns(ghost h:int)
    lets
        ctx @= rdi; inp @= rsi; len @= rdx; r0 @= r11; r1 @= r12; h0 @= r14; h1 @= rbx; h2 @= rbp;
        n := 0x1_0000_0000_0000_0000;
        p := n * n * 4 - 5;
    reads
        ctx;
    modifies
        rax; rcx; rdx; r8; r9; r10; r13; r15; inp; len; r0; r1; h0; h1; h2; efl; mem;
    requires
        inp + len < n;
        ctx_id != inp_id;
        ValidSrcAddrs(mem, ctx_id, ctx, 64, Public, 24 * 8);
        ValidSrcAddrs(mem, inp_id, inp, 64, Public, (len + 15) / 16 * 16);
        let key_r0 := mem[ctx_id].mem64[ctx + 24].v;
        let key_r1 := mem[ctx_id].mem64[ctx + 32].v;
        let key_s0 := mem[ctx_id].mem64[ctx + 40].v;
        let key_s1 := mem[ctx_id].mem64[ctx + 48].v;
        key_r == lowerUpper128(key_r0, key_r1);
        key_s == lowerUpper128(key_s0, key_s1);
    ensures
        ctx == old(ctx);
        ValidSrcAddrs(mem, ctx_id, ctx, 64, Public, 24 * 8);
        ValidSrcAddrs(mem, inp_id, old(inp), 64, Public, old(len) + 15 / 16 * 16);
        mem == old(mem)[ctx_id := mem[ctx_id]];
        h == lowerUpper128(h0, h1);
        let inp_mem := heapletTo128(mem[inp_id].mem64, old(inp), old(len));
        forall j :: old(inp) <= j < old(inp) + old(len) && (j - old(inp)) % 16 == 0 ==> inp_mem?[j];
        forall i :: ctx + 72 <= i < ctx + 24 * 8 && (i - ctx) % 8 == 0 ==> mem[ctx_id].mem64[i] == old(mem)[ctx_id].mem64[i];
        h == poly1305_hash(key_r, key_s, inp_mem, old(inp), old(len));
{
    ghost var inp_in := inp;
    ghost var len_in := len;
    ghost var key_r0 := mem[ctx_id].mem64[ctx + 24].v;
    ghost var key_r1 := mem[ctx_id].mem64[ctx + 32].v;
    lemma_poly_bits64();
    lemma_BitwiseAdd64();

    Mov64(rax, 0);
    Store64(ctx, rax,  0, Public, ctx_id);
    Store64(ctx, rax,  8, Public, ctx_id);
    Store64(ctx, rax, 16, Public, ctx_id);

    Load64(r0, ctx, 24, Public, ctx_id);
    Load64(r1, ctx, 32, Public, ctx_id);
    Mov64(rcx, 0x0fff_fffc_0fff_ffff);
    And64(r0, rcx);
    Mov64(rcx, 0x0fff_fffc_0fff_fffc);
    And64(r1, rcx);
    Store64(ctx, r0, 24, Public, ctx_id);
    Store64(ctx, r1, 32, Public, ctx_id);

    ghost var r:uint128 := lowerUpper128(r0, r1);
    assert r == r0 + n * r1 by { reveal lowerUpper128; }
    assert r == and128(key_r, 0x0ffffffc_0ffffffc_0ffffffc_0fffffff) by
    {
        reveal lowerUpper128;
        lemma_lowerUpper128_and(key_r, key_r0, key_r1, 0x0ffffffc_0ffffffc_0ffffffc_0fffffff,
            0x0fff_fffc_0fff_ffff, 0x0fff_fffc_0fff_fffc, r, r0, r1);
    }

    Mov64(rax, len);
    And64(rax, 15);
    Sub64(len, rax);
    // assert rax == len_in % 16;
    // assert len == len_in / 16 * 16;
    Store64(ctx, rax, 56, Public, ctx_id);
    Store64(ctx, len, 64, Public, ctx_id);

    Mov64(rcx, 1);
    h := poly1305_blocks(0, ctx_id, inp_id);
    assert modp(0) == 0 by
    {
        reveal modp;
        assert p == 0x3_ffffffff_ffffffff_ffffffff_fffffffb;
    }

    lemma_poly1305_heap_hash_blocks(0, n * n, r, mem[inp_id].mem64, inp_in, inp_in + len_in / 16 * 16, len_in);
    assert h == lowerUpper192(lowerUpper128(h0, h1), h2)
        by { reveal lowerUpper192; reveal lowerUpper128; }

    Load64(r15, ctx, 56, Public, ctx_id); // assert r15 == len_in % 16;
    assert{:split_here} true;
    if (r15 != 0)
    {
        Load64(rax, ctx, 32, Public, ctx_id);
        Load64(r8, inp, 0, Public, inp_id);
        Load64(r9, inp, 8, Public, inp_id);
        assert lowerUpper128(r8, r9) == heapletTo128(mem[inp_id].mem64, inp_in, len_in)[inp]
            by { reveal heapletTo128; reveal lowerUpper128; }
        poly1305_last_block();
        h := lowerUpper192(lowerUpper128(h0, h1), h2);
    }

    lemma_add_mod128(modp(h), key_s);
    poly1305_reduce_last();
    h := lowerUpper128(h0, h1);

    Load64(rax, ctx, 40, Public, ctx_id);
    Load64(rdx, ctx, 48, Public, ctx_id);
    poly1305_add_key_s();
    h := lowerUpper128(h0, h1);

    assert h == poly1305_hash(key_r, key_s, heapletTo128(mem[inp_id].mem64, inp_in, len_in), inp_in, len_in)
        by { reveal poly1305_hash; }
}

// poly1305(ctx, inp, len)
//
// Note that this reads 16-byte chunks directly from the input buffer,
// so (len + 15) / 16 * 16 bytes must be readable, even though only len bytes
// affect the result.
procedure{:timeLimitMultiplier 2} poly1305(
    inline win:bool,
    ghost key_r:uint128,
    ghost key_s:uint128,
    ghost ctx_id:heaplet_id,
    ghost inp_id:heaplet_id)
    returns(ghost h:int)
    lets
        ctx @= rdi; inp @= rsi; len @= rdx; r0 @= r11; r1 @= r12; h0 @= r14; h1 @= rbx; h2 @= rbp;
        ctx_in := (if win then rcx else ctx);
        inp_in := (if win then rdx else inp);
        len_in := (if win then r8 else len);
        n := 0x1_0000_0000_0000_0000;
        p := n * n * 4 - 5;
    modifies
        rax; rcx; rdx; r8; r9; r10; r13; r15; ctx; inp; len; r0; r1; h0; h1; h2; efl; mem;
    requires
        inp_in + len_in < n;
        ctx_id != inp_id;
        ValidSrcAddrs(mem, ctx_id, ctx_in, 64, Public, 24 * 8);
        ValidSrcAddrs(mem, inp_id, inp_in, 64, Public, (len_in + 15) / 16 * 16);
        let key_r0 := mem[ctx_id].mem64[ctx_in + 24].v;
        let key_r1 := mem[ctx_id].mem64[ctx_in + 32].v;
        let key_s0 := mem[ctx_id].mem64[ctx_in + 40].v;
        let key_s1 := mem[ctx_id].mem64[ctx_in + 48].v;
        key_r == lowerUpper128(key_r0, key_r1);
        key_s == lowerUpper128(key_s0, key_s1);
    ensures
        ValidSrcAddrs(mem, ctx_id, ctx_in, 64, Public, 24 * 8);
        ValidSrcAddrs(mem, inp_id, inp_in, 64, Public, len_in + 15 / 16 * 16);
        mem == old(mem)[ctx_id := mem[ctx_id]];
        let h0_out := mem[ctx_id].mem64[ctx_in].v;
        let h1_out := mem[ctx_id].mem64[ctx_in + 8].v;
        h == lowerUpper128(h0_out, h1_out);
        let inp_mem := heapletTo128(mem[inp_id].mem64, inp_in, len_in);
        forall j :: inp_in <= j < inp_in + len_in && (j - inp_in) % 16 == 0 ==> inp_mem?[j];
        h == poly1305_hash(key_r, key_s, inp_mem, inp_in, len_in);
        h1 == old(h1);
        h2 == old(h2);
        ctx == old(ctx);
        inp == old(inp);
        r1 == old(r1);
        r13 == old(r13);
        h0 == old(h0);
        r15 == old(r15);
{
    Mov64(rax, ctx);
    Mov64(r9, inp);
    inline if (win)
    {
        Mov64(ctx, rcx);
        Mov64(inp, rdx);
        Mov64(len, r8);
    }
    // assert ctx == ctx_in;
    // assert inp == inp_in;
    // assert len == len_in;

    // context:
    //   0, 8, 16: will hold h
    //   24, 32: key_r
    //   40, 48: key_s
    //   56: will hold len % 16
    //   64: will hold len / 16 * 16
    //   72, 80, 88, 96, 104, 112, 120, 128: callee-save registers
    Store64(ctx, h1,  72, Public, ctx_id);
    Store64(ctx, h2,  80, Public, ctx_id);
    Store64(ctx, rax, 88, Public, ctx_id);
    Store64(ctx, r9,  96, Public, ctx_id);
    Store64(ctx, r1,  104, Public, ctx_id);
    Store64(ctx, r13, 112, Public, ctx_id);
    Store64(ctx, h0,  120, Public, ctx_id);
    Store64(ctx, r15, 128, Public, ctx_id);

    h := poly1305_impl(key_r, key_s, ctx_id, inp_id);

    Store64(ctx, h0,  0, Public, ctx_id);
    Store64(ctx, h1,  8, Public, ctx_id);

    Load64(h1,  ctx, 72, Public, ctx_id);
    Load64(h2,  ctx, 80, Public, ctx_id);
    Load64(rax, ctx, 88, Public, ctx_id);
    Load64(inp, ctx, 96, Public, ctx_id);
    Load64(r1,  ctx, 104, Public, ctx_id);
    Load64(r13, ctx, 112, Public, ctx_id);
    Load64(h0,  ctx, 120, Public, ctx_id);
    Load64(r15, ctx, 128, Public, ctx_id);
    Mov64(ctx, rax);
}

#verbatim
} // end module
#endverbatim
