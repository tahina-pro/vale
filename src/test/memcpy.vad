include{:from BASE} "arch/x86/decls.vad"

#verbatim
import opened x86def_s_temp = x86_def_s
import opened x86vale_temp = x86_vale_i
import opened x86decls_temp = x86_decls_i
#endverbatim


procedure{:refined}{:timeLimitMultiplier 2} Copy64(inline taint:taint, ghost src_id:heaplet_id, ghost dst_id:heaplet_id)
    requires/ensures
        ValidSrcAddrs(mem, src_id, esi, 32, taint, 64);
        ValidDstAddrs(mem, dst_id, edi, 32, 64);
        src_id != dst_id;
    ensures
        forall i :: 0 <= i < 64 && i % 4 == 0 ==> mem[dst_id].words[edi + i] == mem[src_id].words[esi + i];
//        forall i :: 0 <= i < 8 && i % 4 == 0 
//          ==>  mem[dst_id].words[edi + i] == mem[src_id].words[esi + i];
    reads
        esi; edi;
    modifies
        eax; ebx; ecx; edx; ebp;
        mem;
{
    Load(eax, esi, 0, taint, src_id);
    Load(ebx, esi, 4, taint, src_id);
    Load(ecx, esi, 8, taint, src_id);
    Load(edx, esi, 12, taint, src_id);
    Load(ebp, esi, 16, taint, src_id);
    Store(edi, eax, 0, taint, dst_id);
    Store(edi, ebx, 4, taint, dst_id);
    Store(edi, ecx, 8, taint, dst_id);
    Store(edi, edx, 12, taint, dst_id);
    Store(edi, ebp, 16, taint, dst_id);
    Load(eax, esi, 20, taint, src_id);
    Load(ebx, esi, 24, taint, src_id);
    Load(ecx, esi, 28, taint, src_id);
    Load(edx, esi, 32, taint, src_id);
    Load(ebp, esi, 36, taint, src_id);
    Store(edi, eax, 20, taint, dst_id);
    Store(edi, ebx, 24, taint, dst_id);
    Store(edi, ecx, 28, taint, dst_id);
    Store(edi, edx, 32, taint, dst_id);
    Store(edi, ebp, 36, taint, dst_id);
    Load(eax, esi, 40, taint, src_id);
    Load(ebx, esi, 44, taint, src_id);
    Load(ecx, esi, 48, taint, src_id);
    Load(edx, esi, 52, taint, src_id);
    Load(ebp, esi, 56, taint, src_id);
    Store(edi, eax, 40, taint, dst_id);
    Store(edi, ebx, 44, taint, dst_id);
    Store(edi, ecx, 48, taint, dst_id);
    Store(edi, edx, 52, taint, dst_id);
    Store(edi, ebp, 56, taint, dst_id);
    Load(eax, esi, 60, taint, src_id);
    Store(edi, eax, 60, taint, dst_id);
}


