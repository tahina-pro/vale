include{:from BASE} "arch/x64/decls.vad"
include{:from BASE} "arch/x64/decls.vad"
include{:verbatim}{:from BASE} "arch/x64/print.s.dfy"
include{:verbatim}{:from BASE} "lib/util/dafny_wrappers.i.dfy"
include "aes.vad"
include{:verbatim} "cbc_helpers.i.dfy"
include{:verbatim} "../cbc.s.dfy" 

#verbatim
module CBC {

import opened x64_def_s
import opened x64_vale_i
import opened x64_print_s
import opened dafny_wrappers_i
import opened x64_decls_i
import opened CBCModule
import opened CBC_Helpers
import opened aes_vale

#endverbatim


// Calling convention:
// Registers initially contains:
// rcx = input_ptr
// rdx = output_ptr
// r8  = key_ptr with enough room to hold expanded stack
// r9  = input_end_ptr
// xmm0 = IV
procedure {:refined} CBCEncryptImplPrelude(
    ghost key:seq(uint32), 
    ghost key_id:heaplet_id,
    ghost alg:Algorithm
    ) returns (
    ghost w:seq(uint32)
    )
    //returns (ghost output:seq(Quadword))
    requires/ensures
        alg == AES_128;
        SeqLength(key) == Nk(alg);
        (Nb() * (Nr(alg) + 1)) / 4 == Nr(alg) + 1;   // Easy to prove, but necessary precondition to Cipher
        (Nb() * (Nr(alg) + 1)) % 4 == 0;   // Easy to prove, but necessary precondition to Cipher

        ValidDstAddrs(mem, key_id, r8, 128, 11*16);  // We need room to store the expanded key
        r8 % 16 == 0;
    requires
        xmm1 == seq_to_Quadword(key);
    reads
        r8; r9;
    modifies
        rax; rcx; rdx; mem; xmm1; xmm2; xmm3; efl;
    ensures
        // Framing
        ValidSrcAddrs(mem, key_id, r8, 128, Secret, 16*11);

        mem == old(mem)[key_id := mem[key_id]];
        forall a :: (a < r8 || a >= r8 + 176) && old(mem)[key_id].quads?[a] ==> mem[key_id].quads?[a] && mem[key_id].quads[a] == old(mem)[key_id].quads[a];

        // Results
        rcx == old(rcx);
        rdx == old(rdx);
        //r8 == old(r8);
        //r9 == old(r9);
        SeqLength(w) == 44;
        forall j :: 0 <= j <= 10 ==> mem[key_id].quads[r8 + 16*j].v == Quadword(w[4*j], w[4*j+1], w[4*j+2], w[4*j+3]);
        KeyExpansionPredicate(key, AES_128, w);

{
    Mov64(rax, rdx); // Preserve rdx
    Mov64(rdx, r8);  // Move the key_ptr into rdx where KeyExpansionImpl expects it
    w := KeyExpansionImpl(key, Secret, key_id);
    Mov64(rdx, rax); // Restore rdx
    Xor64(rax, rax); // Scrub rax
}

// Calling convention:
//  r8 == key_ptr
//  rcx == input_ptr advanced to the current input location
//  rdx == output_ptr advanced to the current output location
procedure {:refined} {:timeLimitMultiplier 3} CBCEncryptBody(
    ghost key:seq(uint32), 
    ghost w:seq(uint32),
    ghost input_id:heaplet_id,
    ghost input:seq(Quadword),
    ghost IV:Quadword,
    ghost key_id:heaplet_id,
    ghost alg:Algorithm,
    ghost output_id:heaplet_id,
    ghost input_ptr:uint64,
    ghost output_ptr:uint64,
    ghost i:nat
    ) 
    requires 
       CBCEncryptBodyPreconditions(
          key, w, input_id, input, IV, 
          key_id, alg, output_id, input_ptr, output_ptr, i, 
          r8, rcx, rdx, r9, 
          mem, xmm0); 

    reads
        r8; r9;
    modifies
        rcx; rdx; mem; xmm0; xmm1; xmm2; xmm3; efl;
    ensures
       CBCEncryptBodyPostconditions(
          key, w, input_id, input, IV, 
          key_id, alg, output_id, input_ptr, output_ptr, i, 
          old(r8), old(rcx), old(rdx), old(r9), 
          r8, rcx, rdx, r9, 
          old(mem), old(xmm0),
          mem, xmm0); 
{
    Load128(xmm1, rcx, 0, Secret, input_id);
    ghost var xmm0_xor_xmm1 := QuadwordXor(xmm0, xmm1);
    Pxor(xmm0, xmm1);
    lemma_QuadwordXorAlwaysCommutes();
    AES128EncryptOneBlock(key, xmm0_xor_xmm1, w, Secret, key_id);

    // Write the result back to memory
    Store128(rdx, xmm0, 0, Secret, output_id);

    Add64(rcx, 16);
    Add64(rdx, 16);

    assert mem?[output_id];   // OBSERVE
    assert old(rdx) == output_ptr + 16*i;   // OBSERVE
    assert old(rdx) == output_ptr + i*16;   // OBSERVE
    assert ValidSrcAddr(mem, output_id, output_ptr + i*16, 128, Secret);   // OBSERVE
    lemma_CBC_step(key, input, IV, alg, i, old(xmm0), xmm0);
    lemma_ValidSrcAddrsExtension(old(mem), mem, output_id, output_ptr, Secret, i);
    ghost if (rdx < output_ptr + SeqLength(input)*16) {
        lemma_ValidDstAddr(mem, output_id, output_ptr, rdx, i, SeqLength(input));
        assert ValidDstAddr(mem, output_id, rdx, 128);
    }
    lemma_CBCOutputExtension(key, input, IV, alg, old(mem), mem, output_id, output_ptr, i);
}

// Calling convention:
//  r8 == key_ptr
//  rcx == input_ptr 
//  rdx == output_ptr 
//  r9 == input_end_ptr
procedure {:timeLimitMultiplier 3} {:refined} CBCEncryptLoop(
    ghost key:seq(uint32), 
    ghost w:seq(uint32),
    ghost input_id:heaplet_id,
    ghost input:seq(Quadword),
    ghost IV:Quadword,
    ghost key_id:heaplet_id,
    ghost alg:Algorithm,
    ghost output_id:heaplet_id
    )
    requires/ensures


    requires
        CBCEncryptLoopInvariant(
              key, w, input_id, input, IV, 
              key_id, alg, output_id, rcx, rdx, 0, 
              r8, rcx, rdx, r9, 
              r8, rcx, rdx, r9, 
              mem, xmm0,
              mem, xmm0);
    reads
        r8; r9;
    modifies
        rcx; rdx; mem; xmm0; xmm1; xmm2; xmm3; efl;
    ensures
        rcx == r9;

        exists block:nat :: CBCEncryptLoopInvariant(
              key, w, input_id, input, IV, 
              key_id, alg, output_id, old(rcx), old(rdx), block, 
              old(r8), old(rcx), old(rdx), old(r9), 
              r8, rcx, rdx, r9, 
              old(mem), old(xmm0),
              mem, xmm0); 
{
    //lemma_CBC_Encrypt_length(key, alg, IV);
    ghost var input_ptr := rcx;
    ghost var output_ptr := rdx;
    ghost var block:nat := 0;
    while (rcx < r9)
      invariant
          old(rcx) <= rcx <= r9;
          CBCEncryptLoopInvariant(
              key, w, input_id, input, IV, 
              key_id, alg, output_id, input_ptr, output_ptr, block, 
              old(r8), old(rcx), old(rdx), old(r9), 
              r8, rcx, rdx, r9, 
              old(mem), old(xmm0),
              mem, xmm0); 
      decreases
          rcx - rcx;
    {
        CBCEncryptBody(key, w, input_id, input, IV, key_id, alg, output_id, input_ptr, output_ptr, block);
        block := block + 1;
    }
}

// Calling convention:
// Registers initially contain:
// rcx = input_ptr
// rdx = output_ptr
// r8 = key_ptr with enough room to hold expanded stack
// r9 = input_end_ptr
// Expects IV to be in xmm0
procedure {:refined} {:timeLimitMultiplier 6} CBCEncryptImpl(
    ghost key:seq(uint32), 
    ghost input_id:heaplet_id,
    ghost input:seq(Quadword),
    ghost key_id:heaplet_id,
    ghost alg:Algorithm,
    ghost output_id:heaplet_id
    ) returns (
    ghost output:seq(Quadword)
    )
    requires/ensures
        alg == AES_128;
        SeqLength(key) == Nk(alg);
        SeqLength(input) > 0;
        (Nb() * (Nr(alg) + 1)) / 4 == Nr(alg) + 1;   // Easy to prove, but necessary precondition to Cipher
        (Nb() * (Nr(alg) + 1)) % 4 == 0;   // Easy to prove, but necessary precondition to Cipher

        ValidDstAddrs(mem, key_id, r8, 128, 11*16);  // We need room to store the expanded key
        r8 % 16 == 0;

        // Input is readable
        ValidSrcAddrs(mem, input_id, old(rcx), 128, Secret, SeqLength(input)*16);
    requires
        xmm1 == seq_to_Quadword(key);
        input_id != key_id && key_id != output_id && input_id != output_id;

        ValidDstAddrs(mem, output_id, rdx, 128, SeqLength(input)*16);
        InputMatchesMemory(input, mem[input_id], rcx);

        rcx + SeqLength(input)*16 < 0x1_0000_0000_0000_0000;
        rdx + SeqLength(input)*16 < 0x1_0000_0000_0000_0000;
        r9 >= rcx;   // end >= start
        r9 == rcx + SeqLength(input)*16;
        r9 < 0x1_0000_0000_0000_0000;
    reads
        r8; r9;
    modifies
        rax; rcx; rdx; mem; xmm0; xmm1; xmm2; xmm3; efl;
    ensures
        // Output is now readable
        ValidSrcAddrs(mem, output_id, old(rdx), 128, Secret, SeqLength(input)*16);

        // Framing
        mem == old(mem)[key_id := mem[key_id]][output_id := mem[output_id]];

        CBCOutputFinal(key, input, old(xmm0), alg, mem, output_id, old(rdx), output);
{
    ghost var w:seq(uint32);
    w := CBCEncryptImplPrelude(key, key_id, alg);

    //assert InputMatchesMemory(input, mem[input_id], rcx);
    assert r9 == rcx + SeqLength(input)*16;

    ghost var old_rcx := rcx;
    ghost var old_rdx := rdx;
    ghost var old_r8 := r8;
    ghost var old_r9 := r9;
    ghost var old_mem := mem;
    ghost var old_xmm0 := xmm0;
    CBCEncryptLoop(key, w, input_id, input, xmm0, key_id, alg, output_id);

    exists block:nat :: CBCEncryptLoopInvariant(
              key, w, input_id, input, old_xmm0, 
              key_id, alg, output_id, old_rcx, old_rdx, block, 
              old_r8, old_rcx, old_rdx, old_r9, 
              r8, rcx, rdx, r9, 
              old_mem, old_xmm0,
              mem, xmm0); 

    output := lemma_CBCEncryptInvariantImplications(
              key, w, input_id, input, old_xmm0, 
              key_id, alg, output_id, old_rcx, old_rdx, block, 
              old_r8, old_rcx, old_rdx, old_r9, 
              r8, rcx, rdx, r9, 
              old_mem, old_xmm0,
              mem, xmm0); 
}


// Calling convention:
// registers initially contain:
// rcx = input_ptr
// rdx = output_ptr
// r8 = key_ptr with expanded key
// r9 = input_end_ptr
// xmm0 = IV 
procedure {:refined} CBCJustEncryptImpl(
    ghost key:seq(uint32), 
    ghost w:seq(uint32),
    ghost input_id:heaplet_id,
    ghost input:seq(Quadword),
    ghost key_id:heaplet_id,
    ghost alg:Algorithm,
    ghost output_id:heaplet_id
    ) returns (
    ghost output:seq(Quadword)
    )
    requires/ensures
        alg == AES_128;
        SeqLength(key) == Nk(alg);
        SeqLength(input) > 0;
        (Nb() * (Nr(alg) + 1)) / 4 == Nr(alg) + 1;   // Easy to prove, but necessary precondition to Cipher
        (Nb() * (Nr(alg) + 1)) % 4 == 0;   // Easy to prove, but necessary precondition to Cipher

        r8 % 16 == 0;

        ValidSrcAddrs(mem, key_id, r8, 128, Secret, 11*16);  // Key is readable
        SeqLength(w) == 44;
        mem[key_id].quads[r8 + 16*0].v == Quadword(w[4*0], w[4*0+1], w[4*0+2], w[4*0+3]);
        (forall j :: 0 <= j <= 10 ==> mem[key_id].quads[r8 + 16*j].v == Quadword(w[4*j], w[4*j+1], w[4*j+2], w[4*j+3]));
        KeyExpansionPredicate(key, AES_128, w);

        // Input is readable
        ValidSrcAddrs(mem, input_id, old(rcx), 128, Secret, SeqLength(input)*16);
    requires
        //xmm1 == seq_to_Quadword(key);
        input_id != key_id && key_id != output_id && input_id != output_id;

        ValidDstAddrs(mem, output_id, rdx, 128, SeqLength(input)*16);
        InputMatchesMemory(input, mem[input_id], rcx);

        rcx + SeqLength(input)*16 < 0x1_0000_0000_0000_0000;
        rdx + SeqLength(input)*16 < 0x1_0000_0000_0000_0000;
        r9 >= rcx;   // end >= start
        r9 == rcx + SeqLength(input)*16;
        r9 < 0x1_0000_0000_0000_0000;
    reads
        r8; r9;
    modifies
        rcx; rdx; mem; xmm0; xmm1; xmm2; xmm3; efl;
    ensures
        // Output is now readable
        ValidSrcAddrs(mem, output_id, old(rdx), 128, Secret, SeqLength(input)*16);

        // Framing
        mem == old(mem)[output_id := mem[output_id]];

        CBCOutputFinal(key, input, old(xmm0), alg, mem, output_id, old(rdx), output);
{
    
    //assert InputMatchesMemory(input, mem[input_id], rcx);
    assert r9 == rcx + SeqLength(input)*16;

    ghost var old_rcx := rcx; // input_ptr
    ghost var old_rdx := rdx; // output_ptr
    ghost var old_r8 := r8;   // key_ptr
    ghost var old_r9 := r9;   // input_end_ptr
    ghost var old_mem := mem;
    ghost var old_xmm0 := xmm0;
    CBCEncryptLoop(key, w, input_id, input, xmm0, key_id, alg, output_id);

    exists block:nat :: CBCEncryptLoopInvariant(
              key, w, input_id, input, old_xmm0, 
              key_id, alg, output_id, old_rcx, old_rdx, block, 
              old_r8, old_rcx, old_rdx, old_r9, 
              r8, rcx, rdx, r9, 
              old_mem, old_xmm0,
              mem, xmm0); 

    output := lemma_CBCEncryptInvariantImplications(
              key, w, input_id, input, old_xmm0, 
              key_id, alg, output_id, old_rcx, old_rdx, block, 
              old_r8, old_rcx, old_rdx, old_r9, 
              r8, rcx, rdx, r9,
              old_mem, old_xmm0,
              mem, xmm0); 
}


// Calling convention:
// Registers initially contain: (Windows/Linux)
// rcx/rdi = input_ptr
// rdx/rsi = output_ptr
// r8 /rdx = key_ptr with expanded key
// r9 /rcx = input_end_ptr
// stack (rsp+(10*4))/r8 = IV ptr.  Note that stack[0][0] is rsp+8 already.
procedure {:refined} CBCEncryptStdcall(
    inline win:bool,
    ghost key:seq(uint32), 
    ghost w:seq(uint32),
    ghost input_id:heaplet_id,
    ghost input:seq(Quadword),
    ghost key_id:heaplet_id,
    ghost alg:Algorithm,
    ghost output_id:heaplet_id,
    ghost IV:Quadword,
    ghost IV_id:heaplet_id
    ) returns (
    ghost output:seq(Quadword)
    )
    requires/ensures
        alg == AES_128;
        SeqLength(key) == Nk(alg);
        SeqLength(input) > 0;
        (Nb() * (Nr(alg) + 1)) / 4 == Nr(alg) + 1;   // Easy to prove, but necessary precondition to Cipher
        (Nb() * (Nr(alg) + 1)) % 4 == 0;   // Easy to prove, but necessary precondition to Cipher
        if win then HasStackSlots(stack, 10) else true; // Two 32-bit stack slots, for one 64-bit IV pointer, starting at offset (10*4) from rsp

        let input_ptr     := if win then old(rcx) else old(rdi);
        let output_ptr    := if win then old(rdx) else old(rsi);
        let key_ptr       := if win then old(r8)  else old(rdx);
        let input_end_ptr := if win then old(r9)  else old(rcx);
        key_ptr % 16 == 0;

        ValidSrcAddrs(mem, key_id, key_ptr, 128, Secret, 11*16);  // Key is readable
        SeqLength(w) == 44;
        (forall j :: 0 <= j <= 10 ==> mem[key_id].quads[key_ptr + 16*j].v == Quadword(w[4*j], w[4*j+1], w[4*j+2], w[4*j+3]));
        KeyExpansionPredicate(key, AES_128, w);

        // Input is readable
        ValidSrcAddrs(mem, input_id, input_ptr, 128, Secret, SeqLength(input)*16);
    requires
        input_id != key_id && key_id != output_id && input_id != output_id && IV_id != output_id;

        let input_ptr     := if win then rcx else rdi;
        let output_ptr    := if win then rdx else rsi;
        let key_ptr       := if win then r8  else rdx;
        let input_end_ptr := if win then r9  else rcx;
        
        // IV is readable
        let iv_ptr        := if win then lowerUpper64(stack[0][8], stack[0][8 + 1]) else r8;
        ValidSrcAddrs(mem, IV_id, iv_ptr, 128, Public, 16);
        IV == mem[IV_id].quads[iv_ptr].v;

        ValidDstAddrs(mem, output_id, output_ptr, 128, SeqLength(input)*16);
        InputMatchesMemory(input, mem[input_id], input_ptr);

        input_ptr + SeqLength(input)*16 < 0x1_0000_0000_0000_0000;
        output_ptr + SeqLength(input)*16 < 0x1_0000_0000_0000_0000;
        input_end_ptr >= input_ptr;   // end >= start
        input_end_ptr == input_ptr + SeqLength(input)*16;
        input_end_ptr < 0x1_0000_0000_0000_0000;
    reads        
        rsi; rdi;
    modifies
        rax; rcx; rdx; r8; r9; mem; xmm0; xmm1; xmm2; xmm3; efl; stack; 
    ensures
        let output_ptr    := if win then old(rdx) else old(rsi);

        // Output is now readable
        ValidSrcAddrs(mem, output_id, output_ptr, 128, Secret, SeqLength(input)*16);

        // Framing
        mem == old(mem)[output_id := mem[output_id]];

        CBCOutputFinal(key, input, IV, alg, mem, output_id, output_ptr, output);
{
    ghost var input_ptr     := if win then rcx else rdi;
    ghost var output_ptr    := if win then rdx else rsi;
    ghost var key_ptr       := if win then r8  else rdx;
    ghost var input_end_ptr := if win then r9  else rcx;
        
        
    // Load the IV
    inline if (win) 
    {
        LoadStack64(rax, 8);  // rax := IV_ptr
        Load128(xmm0, rax, 0, Public, IV_id);
    }
    else
    {
        Load128(xmm0, r8, 0, Public, IV_id);
        Mov64(r9, rcx);
        Mov64(r8, rdx);
        Mov64(rdx, rsi);
        Mov64(rcx, rdi);
    }
    assert xmm0 == IV;

    output := CBCJustEncryptImpl(key, w, input_id, input, key_id, alg, output_id);

    // Clear secrets out of registers
    Xor64(rax, rax);
    Xor64(rcx, rcx);
    Xor64(rdx, rdx);
    Pxor(xmm0, xmm0);
    Pxor(xmm1, xmm1);
    Pxor(xmm2, xmm2);
    Pxor(xmm3, xmm3);
}



#verbatim
} // end module CBC
#endverbatim
