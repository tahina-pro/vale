include{:from BASE} "arch/x86/decls.vad"
include{:verbatim}{:from BASE} "arch/x86/print.s.dfy"
include{:verbatim}{:from BASE} "lib/util/dafny_wrappers.i.dfy"
include "aes.vad"
include{:verbatim} "cbc_helpers.i.dfy"
include{:verbatim} "cbc.s.dfy" 

#verbatim
module CBC {

import opened x86_def_s
import opened x86_vale_i
import opened x86_print_s
import opened dafny_wrappers_i
import opened x86_decls_i
import opened CBCModule
import opened CBC_Helpers
import opened aes_vale

#endverbatim


// Calling convention:
// Stack initially contains:
// 0 = input_ptr
// 1 = output_ptr
// 2 = key_ptr with enough room to hold expanded stack
// 3 = input_end_ptr
// Expects IV to be in xmm0
procedure {:refined} CBCEncryptImplPrelude(
    ghost key:seq(uint32), 
    ghost key_id:heaplet_id,
    ghost alg:Algorithm
    ) returns (
    ghost w:seq(uint32)
    )
    //returns (ghost output:seq(Quadword))
    requires/ensures
        alg == AES_128;
        SeqLength(key) == Nk(alg);
        (Nb() * (Nr(alg) + 1)) / 4 == Nr(alg) + 1;   // Easy to prove, but necessary precondition to Cipher
        (Nb() * (Nr(alg) + 1)) % 4 == 0;   // Easy to prove, but necessary precondition to Cipher

        HasStackSlots(stack, 4);

        ValidDstAddrs(mem, key_id, stack[0][2], 128, 11*16);  // We need room to store the expanded key
        stack[0][2] % 16 == 0;
    requires
        xmm1 == seq_to_Quadword(key);
    reads
        stack; 
    modifies
        eax; ebx; ecx; edx; mem; xmm1; xmm2; xmm3; efl;
    ensures
        // Framing
        ValidSrcAddrs(mem, key_id, eax, 128, Secret, 16*11);

        mem == old(mem)[key_id := mem[key_id]];
        forall a :: (a < eax || a >= eax + 176) && old(mem)[key_id].quads?[a] ==> mem[key_id].quads?[a] && mem[key_id].quads[a] == old(mem)[key_id].quads[a];

        // Results
        ebx == stack[0][0];
        ecx == stack[0][1];
        eax == stack[0][2];
        edx == stack[0][3];
        SeqLength(w) == 44;
        forall j :: 0 <= j <= 10 ==> mem[key_id].quads[eax + 16*j].v == Quadword(w[4*j], w[4*j+1], w[4*j+2], w[4*j+3]);
        KeyExpansionPredicate(key, AES_128, w);

{
    LoadStack(ebx, 0);  // ebx := input_ptr
    LoadStack(ecx, 1);  // ecx := output_ptr
    LoadStack(eax, 2);  // eax := key_ptr
    LoadStack(edx, 3);  // edx := input_end_ptr
    w := KeyExpansionImpl(key, Secret, key_id);
}

// Calling convention:
//  eax == key_ptr
//  ebx == input_ptr advanced to the current input location
//  ecx == output_ptr advanced to the current output location
procedure {:refined} {:timeLimitMultiplier 3} CBCEncryptBody(
    ghost key:seq(uint32), 
    ghost w:seq(uint32),
    ghost input_id:heaplet_id,
    ghost input:seq(Quadword),
    ghost IV:Quadword,
    ghost key_id:heaplet_id,
    ghost alg:Algorithm,
    ghost output_id:heaplet_id,
    ghost input_ptr:uint32,
    ghost output_ptr:uint32,
    ghost i:nat
    ) 
    requires 
       CBCEncryptBodyPreconditions(
          key, w, input_id, input, IV, 
          key_id, alg, output_id, input_ptr, output_ptr, i, 
          eax, ebx, ecx, edx, 
          mem, xmm0); 

    reads
        eax; edx;
    modifies
        ebx; ecx; mem; xmm0; xmm1; xmm2; xmm3; efl;
    ensures
       CBCEncryptBodyPostconditions(
          key, w, input_id, input, IV, 
          key_id, alg, output_id, input_ptr, output_ptr, i, 
          old(eax), old(ebx), old(ecx), old(edx), 
          eax, ebx, ecx, edx, 
          old(mem), old(xmm0),
          mem, xmm0); 
{
    Load128(xmm1, ebx, 0, Secret, input_id);
    ghost var xmm0_xor_xmm1 := QuadwordXor(xmm0, xmm1);
    Pxor(xmm0, xmm1);
    lemma_QuadwordXorAlwaysCommutes();
    AES128EncryptOneBlock(key, xmm0_xor_xmm1, w, Secret, key_id);

    // Write the result back to memory
    Store128(ecx, xmm0, 0, Secret, output_id);

    Add32(ebx, 16);
    Add32(ecx, 16);

    assert mem?[output_id];   // OBSERVE
    assert old(ecx) == output_ptr + 16*i;   // OBSERVE
    assert old(ecx) == output_ptr + i*16;   // OBSERVE
    assert ValidSrcAddr(mem, output_id, output_ptr + i*16, 128, Secret);   // OBSERVE
    lemma_CBC_step(key, input, IV, alg, i, old(xmm0), xmm0);
    lemma_ValidSrcAddrsExtension(old(mem), mem, output_id, output_ptr, Secret, i);
    ghost if (ecx < output_ptr + SeqLength(input)*16) {
        lemma_ValidDstAddr(mem, output_id, output_ptr, ecx, i, SeqLength(input));
        assert ValidDstAddr(mem, output_id, ecx, 128);
    }
    lemma_CBCOutputExtension(key, input, IV, alg, old(mem), mem, output_id, output_ptr, i);
}

// Calling convention:
//  eax == key_ptr
//  ebx == input_ptr 
//  ecx == output_ptr 
//  edx == input_end_ptr
procedure {:timeLimitMultiplier 3} {:refined} CBCEncryptLoop(
    ghost key:seq(uint32), 
    ghost w:seq(uint32),
    ghost input_id:heaplet_id,
    ghost input:seq(Quadword),
    ghost IV:Quadword,
    ghost key_id:heaplet_id,
    ghost alg:Algorithm,
    ghost output_id:heaplet_id
    )
    requires/ensures


    requires
        CBCEncryptLoopInvariant(
              key, w, input_id, input, IV, 
              key_id, alg, output_id, ebx, ecx, 0, 
              eax, ebx, ecx, edx, 
              eax, ebx, ecx, edx, 
              mem, xmm0,
              mem, xmm0);
    reads
        eax; edx;
    modifies
        ebx; ecx; mem; xmm0; xmm1; xmm2; xmm3; efl;
    ensures
        ebx == edx;

        exists block:nat :: CBCEncryptLoopInvariant(
              key, w, input_id, input, IV, 
              key_id, alg, output_id, old(ebx), old(ecx), block, 
              old(eax), old(ebx), old(ecx), old(edx), 
              eax, ebx, ecx, edx, 
              old(mem), old(xmm0),
              mem, xmm0); 
{
    //lemma_CBC_Encrypt_length(key, alg, IV);
    ghost var input_ptr := ebx;
    ghost var output_ptr := ecx;
    ghost var block:nat := 0;
    while (ebx < edx)
      invariant
          old(ebx) <= ebx <= edx;
          CBCEncryptLoopInvariant(
              key, w, input_id, input, IV, 
              key_id, alg, output_id, input_ptr, output_ptr, block, 
              old(eax), old(ebx), old(ecx), old(edx), 
              eax, ebx, ecx, edx, 
              old(mem), old(xmm0),
              mem, xmm0); 
      decreases
          ebx - ebx;
    {
        CBCEncryptBody(key, w, input_id, input, IV, key_id, alg, output_id, input_ptr, output_ptr, block);
        block := block + 1;
    }
}

// Calling convention:
// Stack initially contains:
// 0 = input_ptr
// 1 = output_ptr
// 2 = key_ptr with enough room to hold expanded stack
// 3 = input_end_ptr
// Expects IV to be in xmm0
procedure {:refined} {:timeLimitMultiplier 6} CBCEncryptImpl(
    ghost key:seq(uint32), 
    ghost input_id:heaplet_id,
    ghost input:seq(Quadword),
    ghost key_id:heaplet_id,
    ghost alg:Algorithm,
    ghost output_id:heaplet_id
    ) returns (
    ghost output:seq(Quadword)
    )
    requires/ensures
        alg == AES_128;
        SeqLength(key) == Nk(alg);
        SeqLength(input) > 0;
        (Nb() * (Nr(alg) + 1)) / 4 == Nr(alg) + 1;   // Easy to prove, but necessary precondition to Cipher
        (Nb() * (Nr(alg) + 1)) % 4 == 0;   // Easy to prove, but necessary precondition to Cipher

        HasStackSlots(stack, 4);

        ValidDstAddrs(mem, key_id, stack[0][2], 128, 11*16);  // We need room to store the expanded key
        stack[0][2] % 16 == 0;

        // Input is readable
        ValidSrcAddrs(mem, input_id, stack[0][0], 128, Secret, SeqLength(input)*16);
    requires
        xmm1 == seq_to_Quadword(key);
        input_id != key_id && key_id != output_id && input_id != output_id;

        ValidDstAddrs(mem, output_id, stack[0][1], 128, SeqLength(input)*16);
        InputMatchesMemory(input, mem[input_id], stack[0][0]);

        stack[0][0] + SeqLength(input)*16 < 0x1_0000_0000;
        stack[0][1] + SeqLength(input)*16 < 0x1_0000_0000;
        stack[0][3] >= stack[0][0];   // end >= start
        stack[0][3] == stack[0][0] + SeqLength(input)*16;
        stack[0][3] < 0x1_0000_0000;

    reads
        stack; 
    modifies
        eax; ebx; ecx; edx; mem; xmm0; xmm1; xmm2; xmm3; efl;
    ensures
        // Output is now readable
        ValidSrcAddrs(mem, output_id, stack[0][1], 128, Secret, SeqLength(input)*16);

        // Framing
        mem == old(mem)[key_id := mem[key_id]][output_id := mem[output_id]];

        CBCOutputFinal(key, input, old(xmm0), alg, mem, output_id, stack[0][1], output);
{
    ghost var w:seq(uint32);
    w := CBCEncryptImplPrelude(key, key_id, alg);

    //assert InputMatchesMemory(input, mem[input_id], ebx);
    assert edx == ebx + SeqLength(input)*16;

    ghost var old_eax := eax;
    ghost var old_ebx := ebx;
    ghost var old_ecx := ecx;
    ghost var old_edx := edx;
    ghost var old_mem := mem;
    ghost var old_xmm0 := xmm0;
    CBCEncryptLoop(key, w, input_id, input, xmm0, key_id, alg, output_id);

    exists block:nat :: CBCEncryptLoopInvariant(
              key, w, input_id, input, old_xmm0, 
              key_id, alg, output_id, old_ebx, old_ecx, block, 
              old_eax, old_ebx, old_ecx, old_edx, 
              eax, ebx, ecx, edx, 
              old_mem, old_xmm0,
              mem, xmm0); 

    output := lemma_CBCEncryptInvariantImplications(
              key, w, input_id, input, old_xmm0, 
              key_id, alg, output_id, old_ebx, old_ecx, block, 
              old_eax, old_ebx, old_ecx, old_edx, 
              eax, ebx, ecx, edx, 
              old_mem, old_xmm0,
              mem, xmm0); 
}


// Calling convention:
// Stack initially contains:
// 0 = input_ptr
// 1 = output_ptr
// 2 = key_ptr with expanded key
// 3 = input_end_ptr
// Expects IV to be in xmm0
procedure {:refined}{:timeLimitMultiplier 2} CBCJustEncryptImpl(
    ghost key:seq(uint32), 
    ghost w:seq(uint32),
    ghost input_id:heaplet_id,
    ghost input:seq(Quadword),
    ghost key_id:heaplet_id,
    ghost alg:Algorithm,
    ghost output_id:heaplet_id
    ) returns (
    ghost output:seq(Quadword)
    )
    requires/ensures
        alg == AES_128;
        SeqLength(key) == Nk(alg);
        SeqLength(input) > 0;
        (Nb() * (Nr(alg) + 1)) / 4 == Nr(alg) + 1;   // Easy to prove, but necessary precondition to Cipher
        (Nb() * (Nr(alg) + 1)) % 4 == 0;   // Easy to prove, but necessary precondition to Cipher
        HasStackSlots(stack, 4);

        stack[0][2] % 16 == 0;

         ValidSrcAddrs(mem, key_id, stack[0][2], 128, Secret, 11*16);  // Key is readable
         SeqLength(w) == 44;
         (forall j :: 0 <= j <= 10 ==> mem[key_id].quads[stack[0][2] + 16*j].v == Quadword(w[4*j], w[4*j+1], w[4*j+2], w[4*j+3]));
         KeyExpansionPredicate(key, AES_128, w);

        // Input is readable
        ValidSrcAddrs(mem, input_id, stack[0][0], 128, Secret, SeqLength(input)*16);
    requires
        //xmm1 == seq_to_Quadword(key);
        input_id != key_id && key_id != output_id && input_id != output_id;

        ValidDstAddrs(mem, output_id, stack[0][1], 128, SeqLength(input)*16);
        InputMatchesMemory(input, mem[input_id], stack[0][0]);

        stack[0][0] + SeqLength(input)*16 < 0x1_0000_0000;
        stack[0][1] + SeqLength(input)*16 < 0x1_0000_0000;
        stack[0][3] >= stack[0][0];   // end >= start
        stack[0][3] == stack[0][0] + SeqLength(input)*16;
        stack[0][3] < 0x1_0000_0000;

    reads
        stack; 
    modifies
        eax; ebx; ecx; edx; mem; xmm0; xmm1; xmm2; xmm3; efl;
    ensures
        // Output is now readable
        ValidSrcAddrs(mem, output_id, stack[0][1], 128, Secret, SeqLength(input)*16);

        // Framing
        mem == old(mem)[output_id := mem[output_id]];

        CBCOutputFinal(key, input, old(xmm0), alg, mem, output_id, stack[0][1], output);
{
    LoadStack(ebx, 0);  // ebx := input_ptr
    LoadStack(ecx, 1);  // ecx := output_ptr
    LoadStack(eax, 2);  // eax := key_ptr
    LoadStack(edx, 3);  // edx := input_end_ptr

    //assert InputMatchesMemory(input, mem[input_id], ebx);
    assert edx == ebx + SeqLength(input)*16;

    ghost var old_eax := eax;
    ghost var old_ebx := ebx;
    ghost var old_ecx := ecx;
    ghost var old_edx := edx;
    ghost var old_mem := mem;
    ghost var old_xmm0 := xmm0;
    CBCEncryptLoop(key, w, input_id, input, xmm0, key_id, alg, output_id);

    exists block:nat :: CBCEncryptLoopInvariant(
              key, w, input_id, input, old_xmm0, 
              key_id, alg, output_id, old_ebx, old_ecx, block, 
              old_eax, old_ebx, old_ecx, old_edx, 
              eax, ebx, ecx, edx, 
              old_mem, old_xmm0,
              mem, xmm0); 

    output := lemma_CBCEncryptInvariantImplications(
              key, w, input_id, input, old_xmm0, 
              key_id, alg, output_id, old_ebx, old_ecx, block, 
              old_eax, old_ebx, old_ecx, old_edx, 
              eax, ebx, ecx, edx, 
              old_mem, old_xmm0,
              mem, xmm0); 
}


// Calling convention:
// Stack initially contains:
// 0 = input_ptr
// 1 = output_ptr
// 2 = key_ptr with expanded key
// 3 = input_end_ptr
// 4 = IV ptr
procedure {:refined}{:timeLimitMultiplier 2} CBCEncryptStdcall(
    ghost key:seq(uint32), 
    ghost w:seq(uint32),
    ghost input_id:heaplet_id,
    ghost input:seq(Quadword),
    ghost key_id:heaplet_id,
    ghost alg:Algorithm,
    ghost output_id:heaplet_id,
    ghost IV:Quadword,
    ghost IV_id:heaplet_id
    ) returns (
    ghost output:seq(Quadword)
    )
    requires/ensures
        alg == AES_128;
        SeqLength(key) == Nk(alg);
        SeqLength(input) > 0;
        (Nb() * (Nr(alg) + 1)) / 4 == Nr(alg) + 1;   // Easy to prove, but necessary precondition to Cipher
        (Nb() * (Nr(alg) + 1)) % 4 == 0;   // Easy to prove, but necessary precondition to Cipher
        HasStackSlots(stack, 6);

        stack[0][2] % 16 == 0;

         ValidSrcAddrs(mem, key_id, stack[0][2], 128, Secret, 11*16);  // Key is readable
         SeqLength(w) == 44;
         (forall j :: 0 <= j <= 10 ==> mem[key_id].quads[stack[0][2] + 16*j].v == Quadword(w[4*j], w[4*j+1], w[4*j+2], w[4*j+3]));
         KeyExpansionPredicate(key, AES_128, w);

        // Input is readable
        ValidSrcAddrs(mem, input_id, stack[0][0], 128, Secret, SeqLength(input)*16);
    requires
        input_id != key_id && key_id != output_id && input_id != output_id && IV_id != output_id;

        // IV is readable
        ValidSrcAddrs(mem, IV_id, stack[0][4], 128, Public, 16);
        IV == mem[IV_id].quads[stack[0][4]].v;

        ValidDstAddrs(mem, output_id, stack[0][1], 128, SeqLength(input)*16);
        InputMatchesMemory(input, mem[input_id], stack[0][0]);

        stack[0][0] + SeqLength(input)*16 < 0x1_0000_0000;
        stack[0][1] + SeqLength(input)*16 < 0x1_0000_0000;
        stack[0][3] >= stack[0][0];   // end >= start
        stack[0][3] == stack[0][0] + SeqLength(input)*16;
        stack[0][3] < 0x1_0000_0000;

    modifies
        eax; ebx; ecx; edx; mem; xmm0; xmm1; xmm2; xmm3; efl; stack; 
    ensures
        // Calling convention
        ebx == old(ebx);
//        esi == old(esi);  // Implied by lack of mention in modifies
//        edi == old(edi);  // Implied by lack of mention in modifies
//        ebp == old(ebp);  // Implied by lack of mention in modifies

        // Stack framing: Nothing changes
        stack[0][5] == 0;
        forall s :: s != 5 && old(stack)[0]?[s] ==> stack[0]?[s] && stack[0][s] == old(stack)[0][s];
        SeqTail(stack, 1) == SeqTail(old(stack), 1);

        // Output is now readable
        ValidSrcAddrs(mem, output_id, stack[0][1], 128, Secret, SeqLength(input)*16);

        // Framing
        mem == old(mem)[output_id := mem[output_id]];

        CBCOutputFinal(key, input, IV, alg, mem, output_id, stack[0][1], output);
{
    // Load the IV
    LoadStack(eax, 4);  // eax := IV_ptr
    Load128(xmm0, eax, 0, Public, IV_id);
    assert xmm0 == IV;

    // Save a copy of ebx
    StoreStack(5, ebx);

    output := CBCJustEncryptImpl(key, w, input_id, input, key_id, alg, output_id);

    // Restore ebx
    LoadStack(ebx, 5);
    StoreStack(5, 0); // Scrub stack location

    // Clear secrets out of registers
    Xor32(eax, eax);
    Xor32(ecx, ecx);
    Xor32(edx, edx);
    Pxor(xmm0, xmm0);
    Pxor(xmm1, xmm1);
    Pxor(xmm2, xmm2);
    Pxor(xmm3, xmm3);
}



#verbatim
} // end module CBC
#endverbatim
