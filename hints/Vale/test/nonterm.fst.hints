[
  "NQ\u001e(år3pè!,1¸åç6",
  [
    [
      "Nonterm.ins",
      1,
      1,
      0,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0,
      "eff28d994edcb32da818a532cc050212"
    ],
    [
      "Nonterm.ocmp",
      1,
      1,
      0,
      [ "@query", "assumption_Nonterm.reg__uu___haseq" ],
      0,
      "9a826614180783e5c6c43bb515a053b6"
    ],
    [
      "Nonterm.va_code",
      1,
      1,
      0,
      [
        "@query", "assumption_Nonterm.ins__uu___haseq",
        "assumption_Nonterm.ocmp__uu___haseq",
        "assumption_Prims.list__uu___haseq", "kinding_Nonterm.va_code@tok"
      ],
      0,
      "45718eb4922fe5075c90367f122e528e"
    ],
    [
      "Nonterm.__proj__Ins__item__ins",
      1,
      1,
      0,
      [
        "@MaxIFuel_assumption", "@query", "disc_equation_Nonterm.Ins",
        "projection_inverse_BoxBool_proj_0",
        "refinement_interpretation_Nonterm_Tm_refine_ae836da17a530010c8c5aa19d892a1eb"
      ],
      0,
      "b79b341a93005ab021374dec1cb3f86e"
    ],
    [
      "Nonterm.__proj__Block__item__block",
      1,
      1,
      0,
      [
        "@MaxIFuel_assumption", "@query", "disc_equation_Nonterm.Block",
        "projection_inverse_BoxBool_proj_0",
        "refinement_interpretation_Nonterm_Tm_refine_0ee35a266d87bdf532dc06d5f67cc28d"
      ],
      0,
      "f361c3fb36789b14c6911a365bb9fee3"
    ],
    [
      "Nonterm.__proj__IfElse__item__ifCond",
      1,
      1,
      0,
      [
        "@MaxIFuel_assumption", "@query", "disc_equation_Nonterm.IfElse",
        "projection_inverse_BoxBool_proj_0",
        "refinement_interpretation_Nonterm_Tm_refine_907aa09561ad1c54675cac4052d6a775"
      ],
      0,
      "900d11112bb4c82746370322752d28d5"
    ],
    [
      "Nonterm.__proj__IfElse__item__ifTrue",
      1,
      1,
      0,
      [
        "@MaxIFuel_assumption", "@query", "disc_equation_Nonterm.IfElse",
        "projection_inverse_BoxBool_proj_0",
        "refinement_interpretation_Nonterm_Tm_refine_907aa09561ad1c54675cac4052d6a775"
      ],
      0,
      "4c602381282cfb1b4e0ac8e8cb254a58"
    ],
    [
      "Nonterm.__proj__IfElse__item__ifFalse",
      1,
      1,
      0,
      [
        "@MaxIFuel_assumption", "@query", "disc_equation_Nonterm.IfElse",
        "projection_inverse_BoxBool_proj_0",
        "refinement_interpretation_Nonterm_Tm_refine_907aa09561ad1c54675cac4052d6a775"
      ],
      0,
      "e2d04f60fe8cf48b4c9d07c35ebdd41c"
    ],
    [
      "Nonterm.__proj__While__item__whileCond",
      1,
      1,
      0,
      [
        "@MaxIFuel_assumption", "@query", "disc_equation_Nonterm.While",
        "projection_inverse_BoxBool_proj_0",
        "refinement_interpretation_Nonterm_Tm_refine_bbe23c1578cd552f374c21082acaf1fb"
      ],
      0,
      "58d1a86125a3aa68ef1147eca592e495"
    ],
    [
      "Nonterm.__proj__While__item__whileBody",
      1,
      1,
      0,
      [
        "@MaxIFuel_assumption", "@query", "disc_equation_Nonterm.While",
        "projection_inverse_BoxBool_proj_0",
        "refinement_interpretation_Nonterm_Tm_refine_bbe23c1578cd552f374c21082acaf1fb"
      ],
      0,
      "ca060f53436a495da19aa2f2f171c8ea"
    ],
    [
      "Nonterm.va_state",
      1,
      1,
      0,
      [ "@query", "assumption_Nonterm.reg__uu___haseq" ],
      0,
      "0009c5e5a92a7a6feb9637e06132ed54"
    ],
    [
      "Nonterm.va_get_reg",
      1,
      1,
      0,
      [ "@query", "assumption_Nonterm.reg__uu___haseq" ],
      0,
      "566a58a342833d52617e9acc4968ca3f"
    ],
    [
      "Nonterm.va_update_reg",
      1,
      1,
      0,
      [ "@query", "assumption_Nonterm.reg__uu___haseq" ],
      0,
      "11462aa88521a5f7c140a18e3a2e1e64"
    ],
    [
      "Nonterm.va_update_reg",
      2,
      1,
      0,
      [ "@query", "assumption_Nonterm.reg__uu___haseq" ],
      0,
      "d5c41d18aa4993e9fee1a201adc3aa58"
    ],
    [
      "Nonterm.va_eval_reg",
      1,
      1,
      0,
      [ "@query", "assumption_Nonterm.reg__uu___haseq" ],
      0,
      "fd948f92bf3f1ff1e021d3449a6e3a33"
    ],
    [
      "Nonterm.va_state_eq",
      1,
      1,
      0,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0,
      "1b6d8ed372fa2bc31ee59c6c7f51e00d"
    ],
    [
      "Nonterm.va_state_eq",
      2,
      1,
      0,
      [ "@query", "assumption_Nonterm.reg__uu___haseq" ],
      0,
      "68354d1f06947927e49ec85fface7fdc"
    ],
    [
      "Nonterm.va_state_eq",
      3,
      1,
      0,
      [ "@query", "assumption_Nonterm.reg__uu___haseq" ],
      0,
      "24aaf5ef506d08921a39a518648cd142"
    ],
    [
      "Nonterm.va_state_eq",
      4,
      1,
      0,
      [ "@query", "assumption_Prims.HasEq_int" ],
      0,
      "b8aee768a636aa16a44af87614aae8a1"
    ],
    [
      "Nonterm.va_state_eq",
      5,
      1,
      0,
      [ "@query", "assumption_Nonterm.reg__uu___haseq" ],
      0,
      "ae2186b53eccb6f7a0bde4cd76a14a69"
    ],
    [
      "Nonterm.va_state_eq",
      6,
      1,
      0,
      [ "@query", "assumption_Nonterm.reg__uu___haseq" ],
      0,
      "298b296c1587a32ffc3719ad88183d24"
    ],
    [
      "Nonterm.va_require",
      1,
      1,
      0,
      [ "@query", "assumption_Nonterm.va_code__uu___haseq" ],
      0,
      "09f6b2c8bfc74abd1a768938639f482d"
    ],
    [
      "Nonterm.va_ensure",
      1,
      1,
      0,
      [
        "@query", "assumption_Nonterm.va_code__uu___haseq",
        "assumption_Prims.list__uu___haseq", "kinding_Nonterm.va_code@tok"
      ],
      0,
      "111ed8f2ac806c90669547cd331fded6"
    ],
    [
      "Nonterm.eval_ocmp",
      1,
      1,
      0,
      [ "@query", "assumption_Nonterm.reg__uu___haseq" ],
      0,
      "9f06484d754b289fb68e3044d1c1cc65"
    ],
    [
      "Nonterm.eval_ocmp",
      2,
      1,
      0,
      [ "@query", "assumption_Nonterm.reg__uu___haseq" ],
      0,
      "e364ee2966cb8d036680dc32e5dd9b13"
    ],
    [
      "Nonterm.va_lemma_block",
      1,
      1,
      0,
      [
        "@query", "assumption_Nonterm.va_code__uu___haseq",
        "assumption_Prims.list__uu___haseq", "kinding_Nonterm.va_code@tok"
      ],
      0,
      "751b62900c4ec3cdcd5062a126fdd58f"
    ],
    [
      "Nonterm.va_lemma_Imm",
      1,
      1,
      0,
      [
        "@query", "constructor_distinct_Nonterm.Block",
        "disc_equation_Nonterm.Block", "equation_Nonterm.va_Block",
        "equation_Nonterm.va_CNil", "equation_Nonterm.va_code_Imm",
        "equation_Nonterm.va_codes", "equation_Nonterm.va_require",
        "equation_Nonterm.va_state",
        "equation_Nonterm.va_transparent_code_Imm",
        "proj_equation_Prims.Cons_hd", "projection_inverse_BoxBool_proj_0",
        "projection_inverse_FStar.Pervasives.Native.Mktuple3__2",
        "projection_inverse_Nonterm.Block_block",
        "projection_inverse_Prims.Cons_hd"
      ],
      0,
      "2f2cf689dbb495f0018fbaebf53509e6"
    ],
    [
      "Nonterm.va_lemma_Increment",
      1,
      1,
      0,
      [
        "@query", "constructor_distinct_Nonterm.Block",
        "disc_equation_Nonterm.Block", "equation_Nonterm.va_Block",
        "equation_Nonterm.va_CNil", "equation_Nonterm.va_code_Increment",
        "equation_Nonterm.va_codes", "equation_Nonterm.va_require",
        "equation_Nonterm.va_state",
        "equation_Nonterm.va_transparent_code_Increment",
        "proj_equation_Prims.Cons_hd", "projection_inverse_BoxBool_proj_0",
        "projection_inverse_FStar.Pervasives.Native.Mktuple3__2",
        "projection_inverse_Nonterm.Block_block",
        "projection_inverse_Prims.Cons_hd"
      ],
      0,
      "32e1dc6d1902d3a2fbe1012a4f67598a"
    ],
    [
      "Nonterm.va_lemma_Add",
      1,
      1,
      0,
      [
        "@query", "constructor_distinct_Nonterm.Block",
        "disc_equation_Nonterm.Block", "equation_Nonterm.va_Block",
        "equation_Nonterm.va_CNil", "equation_Nonterm.va_code_Add",
        "equation_Nonterm.va_codes", "equation_Nonterm.va_require",
        "equation_Nonterm.va_state",
        "equation_Nonterm.va_transparent_code_Add",
        "proj_equation_Prims.Cons_hd", "projection_inverse_BoxBool_proj_0",
        "projection_inverse_FStar.Pervasives.Native.Mktuple3__2",
        "projection_inverse_Nonterm.Block_block",
        "projection_inverse_Prims.Cons_hd"
      ],
      0,
      "6dfc444de090de297b26dfb5d80e45b7"
    ],
    [
      "Nonterm.va_lemma_AddReg",
      1,
      1,
      0,
      [
        "@query", "constructor_distinct_Nonterm.Block",
        "constructor_distinct_Prims.Cons", "disc_equation_Nonterm.Block",
        "disc_equation_Prims.Cons", "equation_Nonterm.va_Block",
        "equation_Nonterm.va_CCons", "equation_Nonterm.va_CNil",
        "equation_Nonterm.va_code_Add", "equation_Nonterm.va_code_AddReg",
        "equation_Nonterm.va_codes", "equation_Nonterm.va_ensure",
        "equation_Nonterm.va_get_block", "equation_Nonterm.va_get_ok",
        "equation_Nonterm.va_require", "equation_Nonterm.va_state",
        "equation_Nonterm.va_transparent_code_AddReg",
        "proj_equation_Nonterm.Block_block", "proj_equation_Prims.Cons_hd",
        "proj_equation_Prims.Cons_tl", "projection_inverse_BoxBool_proj_0",
        "projection_inverse_FStar.Pervasives.Native.Mktuple2__1",
        "projection_inverse_FStar.Pervasives.Native.Mktuple2__2",
        "projection_inverse_FStar.Pervasives.Native.Mktuple3__1",
        "projection_inverse_FStar.Pervasives.Native.Mktuple3__2",
        "projection_inverse_Nonterm.Block_block",
        "projection_inverse_Prims.Cons_a",
        "projection_inverse_Prims.Cons_hd",
        "projection_inverse_Prims.Cons_tl", "true_interp"
      ],
      0,
      "a08a630667eea05cd4f1137bf926eabc"
    ],
    [
      "Nonterm.va_lemma_p",
      1,
      1,
      0,
      [
        "@MaxIFuel_assumption", "@query",
        "assumption_Nonterm.reg__uu___haseq",
        "constructor_distinct_Nonterm.Block",
        "constructor_distinct_Nonterm.EAX",
        "constructor_distinct_Nonterm.EBX",
        "constructor_distinct_Prims.Cons", "disc_equation_Nonterm.Block",
        "disc_equation_Prims.Cons", "equality_tok_Nonterm.EAX@tok",
        "equality_tok_Nonterm.EBX@tok", "equation_FStar.Set.eqtype",
        "equation_Nonterm.map", "equation_Nonterm.op_String_Access",
        "equation_Nonterm.op_String_Assignment", "equation_Nonterm.va_Block",
        "equation_Nonterm.va_CCons", "equation_Nonterm.va_CNil",
        "equation_Nonterm.va_code_Increment", "equation_Nonterm.va_code_p",
        "equation_Nonterm.va_codes", "equation_Nonterm.va_ensure",
        "equation_Nonterm.va_eval_reg", "equation_Nonterm.va_get_block",
        "equation_Nonterm.va_get_ok", "equation_Nonterm.va_get_reg",
        "equation_Nonterm.va_is_dst_reg", "equation_Nonterm.va_op_reg_reg",
        "equation_Nonterm.va_require", "equation_Nonterm.va_state",
        "equation_Nonterm.va_state_eq",
        "equation_Nonterm.va_transparent_code_p",
        "equation_Nonterm.va_update_ok",
        "equation_Nonterm.va_update_operand_reg",
        "equation_Nonterm.va_update_reg", "function_token_typing_Prims.int",
        "int_typing", "kinding_Nonterm.reg@tok",
        "lemma_FStar.Map.lemma_SelUpd1", "lemma_FStar.Map.lemma_SelUpd2",
        "proj_equation_Nonterm.Block_block", "proj_equation_Prims.Cons_hd",
        "proj_equation_Prims.Cons_tl", "projection_inverse_BoxBool_proj_0",
        "projection_inverse_BoxInt_proj_0",
        "projection_inverse_FStar.Pervasives.Native.Mktuple2__1",
        "projection_inverse_FStar.Pervasives.Native.Mktuple2__2",
        "projection_inverse_FStar.Pervasives.Native.Mktuple3__1",
        "projection_inverse_FStar.Pervasives.Native.Mktuple3__2",
        "projection_inverse_Nonterm.Block_block",
        "projection_inverse_Prims.Cons_a",
        "projection_inverse_Prims.Cons_hd",
        "projection_inverse_Prims.Cons_tl",
        "refinement_interpretation_Prims_Tm_refine_414d0a9f578ab0048252f8c8f552b99f",
        "true_interp", "typing_tok_Nonterm.EAX@tok",
        "typing_tok_Nonterm.EBX@tok"
      ],
      0,
      "3d0ecdfdbff3fe62991353cce27691b7"
    ],
    [
      "Nonterm.va_lemma_Calls",
      1,
      1,
      0,
      [
        "@MaxIFuel_assumption", "@query",
        "assumption_Nonterm.reg__uu___haseq",
        "constructor_distinct_Nonterm.Block",
        "constructor_distinct_Nonterm.EAX",
        "constructor_distinct_Nonterm.EBX",
        "constructor_distinct_Nonterm.IfElse",
        "constructor_distinct_Prims.Cons", "disc_equation_Nonterm.Block",
        "disc_equation_Nonterm.IfElse", "disc_equation_Prims.Cons",
        "equality_tok_Nonterm.EAX@tok", "equality_tok_Nonterm.EBX@tok",
        "equation_FStar.Set.eqtype", "equation_Nonterm.double",
        "equation_Nonterm.eval_ocmp", "equation_Nonterm.map",
        "equation_Nonterm.op_String_Access",
        "equation_Nonterm.op_String_Assignment", "equation_Nonterm.va_Block",
        "equation_Nonterm.va_CCons", "equation_Nonterm.va_CNil",
        "equation_Nonterm.va_IfElse", "equation_Nonterm.va_cmp_le",
        "equation_Nonterm.va_code_Add", "equation_Nonterm.va_code_Calls",
        "equation_Nonterm.va_code_Imm", "equation_Nonterm.va_code_Increment",
        "equation_Nonterm.va_codes", "equation_Nonterm.va_ensure",
        "equation_Nonterm.va_eval_reg", "equation_Nonterm.va_get_block",
        "equation_Nonterm.va_get_ifCond", "equation_Nonterm.va_get_ifTrue",
        "equation_Nonterm.va_get_ok", "equation_Nonterm.va_get_reg",
        "equation_Nonterm.va_is_dst_reg", "equation_Nonterm.va_is_src_reg",
        "equation_Nonterm.va_op_cmp_reg", "equation_Nonterm.va_op_reg_reg",
        "equation_Nonterm.va_require", "equation_Nonterm.va_state",
        "equation_Nonterm.va_state_eq",
        "equation_Nonterm.va_transparent_code_Add",
        "equation_Nonterm.va_transparent_code_Calls",
        "equation_Nonterm.va_transparent_code_Imm",
        "equation_Nonterm.va_transparent_code_Increment",
        "equation_Nonterm.va_update_ok",
        "equation_Nonterm.va_update_operand_reg",
        "equation_Nonterm.va_update_reg", "function_token_typing_Prims.int",
        "int_typing", "kinding_Nonterm.reg@tok",
        "lemma_FStar.Map.lemma_SelUpd1", "lemma_FStar.Map.lemma_SelUpd2",
        "primitive_Prims.op_LessThanOrEqual",
        "proj_equation_Nonterm.Block_block",
        "proj_equation_Nonterm.IfElse_ifCond",
        "proj_equation_Nonterm.IfElse_ifTrue", "proj_equation_Prims.Cons_hd",
        "proj_equation_Prims.Cons_tl", "projection_inverse_BoxBool_proj_0",
        "projection_inverse_BoxInt_proj_0",
        "projection_inverse_FStar.Pervasives.Native.Mktuple2__1",
        "projection_inverse_FStar.Pervasives.Native.Mktuple2__2",
        "projection_inverse_FStar.Pervasives.Native.Mktuple3__1",
        "projection_inverse_FStar.Pervasives.Native.Mktuple3__2",
        "projection_inverse_Nonterm.Block_block",
        "projection_inverse_Nonterm.IfElse_ifCond",
        "projection_inverse_Nonterm.IfElse_ifFalse",
        "projection_inverse_Nonterm.IfElse_ifTrue",
        "projection_inverse_Nonterm.OLe_o1",
        "projection_inverse_Nonterm.OLe_o2",
        "projection_inverse_Prims.Cons_a",
        "projection_inverse_Prims.Cons_hd",
        "projection_inverse_Prims.Cons_tl",
        "refinement_interpretation_Prims_Tm_refine_414d0a9f578ab0048252f8c8f552b99f",
        "true_interp", "typing_Nonterm.double",
        "typing_Nonterm.va_update_reg", "typing_tok_Nonterm.EAX@tok",
        "typing_tok_Nonterm.EBX@tok"
      ],
      0,
      "6b0b63f713fc6784269ffe0436e12275"
    ],
    [
      "Nonterm.va_lemma_WhileTest",
      1,
      1,
      0,
      [
        "@MaxIFuel_assumption", "@query",
        "assumption_Nonterm.reg__uu___haseq", "b2t_def", "bool_inversion",
        "constructor_distinct_Nonterm.Block",
        "constructor_distinct_Nonterm.EAX",
        "constructor_distinct_Nonterm.EBX",
        "constructor_distinct_Nonterm.While",
        "constructor_distinct_Prims.Cons", "disc_equation_Nonterm.Block",
        "disc_equation_Nonterm.While", "disc_equation_Prims.Cons",
        "equality_tok_Nonterm.EAX@tok", "equality_tok_Nonterm.EBX@tok",
        "equality_tok_Prims.LexTop@tok", "equation_FStar.Set.eqtype",
        "equation_Nonterm.eval_ocmp", "equation_Nonterm.map",
        "equation_Nonterm.op_String_Access",
        "equation_Nonterm.op_String_Assignment", "equation_Nonterm.va_Block",
        "equation_Nonterm.va_CCons", "equation_Nonterm.va_CNil",
        "equation_Nonterm.va_While", "equation_Nonterm.va_cmp_le",
        "equation_Nonterm.va_code_Increment",
        "equation_Nonterm.va_code_WhileTest", "equation_Nonterm.va_codes",
        "equation_Nonterm.va_ensure", "equation_Nonterm.va_eval_reg",
        "equation_Nonterm.va_get_block", "equation_Nonterm.va_get_ok",
        "equation_Nonterm.va_get_reg", "equation_Nonterm.va_get_whileBody",
        "equation_Nonterm.va_get_whileCond", "equation_Nonterm.va_int",
        "equation_Nonterm.va_is_dst_reg", "equation_Nonterm.va_op_cmp_reg",
        "equation_Nonterm.va_op_reg_reg", "equation_Nonterm.va_require",
        "equation_Nonterm.va_state", "equation_Nonterm.va_state_eq",
        "equation_Nonterm.va_transparent_code_Increment",
        "equation_Nonterm.va_transparent_code_WhileTest",
        "equation_Nonterm.va_update_ok",
        "equation_Nonterm.va_update_operand_reg",
        "equation_Nonterm.va_update_reg", "equation_Nonterm.va_whileInv",
        "equation_Prims.nat",
        "fuel_guarded_inversion_FStar.Pervasives.Native.tuple2",
        "function_token_typing_Prims.int", "int_inversion", "int_typing",
        "kinding_Nonterm.reg@tok", "lemma_FStar.Map.lemma_SelUpd1",
        "lemma_FStar.Map.lemma_SelUpd2", "primitive_Prims.op_GreaterThan",
        "primitive_Prims.op_GreaterThanOrEqual",
        "primitive_Prims.op_LessThanOrEqual",
        "proj_equation_Nonterm.Block_block",
        "proj_equation_Nonterm.While_whileBody",
        "proj_equation_Nonterm.While_whileCond",
        "proj_equation_Prims.Cons_hd", "proj_equation_Prims.Cons_tl",
        "projection_inverse_BoxBool_proj_0",
        "projection_inverse_BoxInt_proj_0",
        "projection_inverse_FStar.Pervasives.Native.Mktuple2__1",
        "projection_inverse_FStar.Pervasives.Native.Mktuple2__2",
        "projection_inverse_FStar.Pervasives.Native.Mktuple2__a",
        "projection_inverse_FStar.Pervasives.Native.Mktuple3__2",
        "projection_inverse_FStar.Pervasives.Native.Mktuple3__3",
        "projection_inverse_Nonterm.Block_block",
        "projection_inverse_Nonterm.OLe_o1",
        "projection_inverse_Nonterm.OLe_o2",
        "projection_inverse_Nonterm.While_whileBody",
        "projection_inverse_Nonterm.While_whileCond",
        "projection_inverse_Prims.Cons_a",
        "projection_inverse_Prims.Cons_hd",
        "projection_inverse_Prims.Cons_tl",
        "refinement_interpretation_Prims_Tm_refine_414d0a9f578ab0048252f8c8f552b99f",
        "refinement_interpretation_Prims_Tm_refine_a4038d5aed1633b5ecbb4e499b1c66ad",
        "true_interp", "typing_Nonterm.va_get_reg",
        "typing_Nonterm.va_update_reg", "typing_tok_Nonterm.EAX@tok",
        "typing_tok_Nonterm.EBX@tok", "well-founded-ordering-on-nat"
      ],
      0,
      "43e9722de503b45e67f4a1da26dae74b"
    ],
    [
      "Nonterm.va_lemma_Ghosts",
      1,
      1,
      0,
      [
        "@MaxIFuel_assumption", "@query",
        "constructor_distinct_Nonterm.Block", "disc_equation_Nonterm.Block",
        "equation_Nonterm.double", "equation_Nonterm.opaque_double",
        "equation_Nonterm.va_Block", "equation_Nonterm.va_CNil",
        "equation_Nonterm.va_code_Ghosts", "equation_Nonterm.va_codes",
        "equation_Nonterm.va_ensure", "equation_Nonterm.va_get_ok",
        "equation_Nonterm.va_require", "equation_Nonterm.va_state",
        "equation_Nonterm.va_state_eq",
        "equation_Nonterm.va_transparent_code_Ghosts",
        "equation_Nonterm.va_update_ok",
        "function_token_typing_Nonterm.make_opaque", "int_inversion",
        "int_typing", "proj_equation_Prims.Cons_hd",
        "proj_equation_Prims.Cons_tl", "projection_inverse_BoxBool_proj_0",
        "projection_inverse_BoxInt_proj_0",
        "projection_inverse_FStar.Pervasives.Native.Mktuple3__1",
        "projection_inverse_FStar.Pervasives.Native.Mktuple3__2",
        "projection_inverse_FStar.Pervasives.Native.Mktuple3__3",
        "projection_inverse_Nonterm.Block_block",
        "projection_inverse_Prims.Cons_hd",
        "projection_inverse_Prims.Cons_tl",
        "token_correspondence_Nonterm.double", "true_interp",
        "typing_Nonterm.opaque_double"
      ],
      0,
      "ba25af97314960d067bb37593ed3a334"
    ]
  ]
]